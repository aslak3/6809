; this is the start of rom

	org $c000

; rom starts with our pretty patterns

lightstart
	fcb %00000001
	fcb %00000010
	fcb %00000100
	fcb %00001000
	fcb %00010000
	fcb %00100000
	fcb %01000000
	fcb %10000000
	fcb %01000000
	fcb %00100000
	fcb %00010000
	fcb %00001000
	fcb %00000100
	fcb %00000010
	fcb %00000001
	fcb %00000010
	fcb %00000100
	fcb %00001000
	fcb %00010000
	fcb %00100000
	fcb %01000000
	fcb %10000000
	fcb %01000000
	fcb %00100000
	fcb %00010000
	fcb %00001000
	fcb %00000100
	fcb %00000010
	fcb %00000001
	fcb %00000011
	fcb %00000111
	fcb %00001111
	fcb %00011111
	fcb %00111111
	fcb %01111111
	fcb %11111111
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %11111110
	fcb %11111100
	fcb %11111000
	fcb %11110000
	fcb %11100000
	fcb %11000000
	fcb %10000000
	fcb %00000000
	fcb %10000000
	fcb %11000000
	fcb %11100000
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %10000111
	fcb %11000011
	fcb %11100001
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %10000111
	fcb %11000011
	fcb %11100001
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %00000111
	fcb %00000011
	fcb %00000001
	fcb %00000000
lightend

; the "address" of the latch (actually the latch is everywhere %10xx)

latch	equ $8000

ram	equ $0000
ramend	equ $7fff
ppause	equ $2000
initdel	equ $6000

; jump forward abit - give us some room at the bottom of the patterns

	org $d000

; setup stack to the end of ram so it can go grown backwards

reset	lds #ramend

; show a test code so we can watch the startup

	lda #$f0
	bsr patshow

; setup the copy pointers - we are copying the pattern the rom to ram

	ldx #lightstart
	ldy #ram
	ldb #lightend-lightstart

; copy pattern into ram

nextco	lda ,x+
	sta ,y+
	decb
	bne nextco

; show a new pattern so we know we got this far

start2	lda #$0f
	bsr patshow

; setup the delay between updates at memloc ppause

	ldd #initdel
	std ppause

; x is the location of the byte to output, b is how many bytes remain

start	ldx #ram
	ldb #lightend-lightstart

; obtain the byte in a and andvance x, before writing it to the latch

next	lda ,x
	sta latch

; invert the data so the next time through it will be different

	coma

; and store it back where we found it, advancing to the next byte

	sta ,x+

; delay by ppause

	ldy ppause
	bsr delay

; go back to the next byte

	decb
	bne next

; adjust the delay by $2000 so the next time round it will be faster

	ldd ppause
	subd #$1000

; if our delay is 0 then reset it for a new run

	beq start2

; store it

	std ppause

; round we go again

	bra start

; delay by y - subroutine

delay	dey
	bne delay
	rts

; shows a pattern and then does a big delay using delay

patshow	sta latch
	ldy #$ffff
	bsr delay
	rts

; setup the reset vector

	org $fffe
	
	fdb reset

