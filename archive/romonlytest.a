; this is the bottom of rom

	org $c000

; rom starts with our pretty patterns

lightstart
	fcb %00000001
	fcb %00000010
	fcb %00000100
	fcb %00001000
	fcb %00010000
	fcb %00100000
	fcb %01000000
	fcb %10000000
	fcb %01000000
	fcb %00100000
	fcb %00010000
	fcb %00001000
	fcb %00000100
	fcb %00000010
	fcb %00000001
	fcb %00000010
	fcb %00000100
	fcb %00001000
	fcb %00010000
	fcb %00100000
	fcb %01000000
	fcb %10000000
	fcb %01000000
	fcb %00100000
	fcb %00010000
	fcb %00001000
	fcb %00000100
	fcb %00000010
	fcb %00000001
	fcb %00000011
	fcb %00000111
	fcb %00001111
	fcb %00011111
	fcb %00111111
	fcb %01111111
	fcb %11111111
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %00000000
	fcb %11111111
	fcb %11111110
	fcb %11111100
	fcb %11111000
	fcb %11110000
	fcb %11100000
	fcb %11000000
	fcb %10000000
	fcb %00000000
	fcb %10000000
	fcb %11000000
	fcb %11100000
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %10000111
	fcb %11000011
	fcb %11100001
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %10000111
	fcb %11000011
	fcb %11100001
	fcb %11110000
	fcb %01111000
	fcb %00111100
	fcb %00011110
	fcb %00001111
	fcb %00000111
	fcb %00000011
	fcb %00000001
	fcb %00000000
lightend

; the "address" of the latch (actually the latch is everywhere %10xx)

latch	equ $8000

; jump forward abit - give us some room at the bottom of the patterns

	org $d000

; x is the location of the byte to output, b is how many bytes remain

start	ldx #lightstart
	ldb #lightend-lightstart

; obtain the byte in a and andvance x, before writing it to the latch

next	lda ,x+
	sta latch

; delay loop

	ldy #$4000
delay	dey
	bne delay

; go back to the next byte

	decb
	bne next

; round we go again

	bra start

; setup the reset vector

	org $fffe
	
	fdb start

